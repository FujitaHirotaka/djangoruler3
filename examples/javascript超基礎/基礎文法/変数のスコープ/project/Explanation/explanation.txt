[概要]
スコープとは
スコープとは変数の名前や関数などの参照できる範囲を決めるものです。
スコープの中で定義された変数はスコープ内でのみ参照でき、
スコープの外側からは参照できません。

身近なスコープの例として関数によるスコープを見ていきます。
次のコードには、fn関数のブロック（{と}）内で変数xを定義しています。
この変数xはfn関数のスコープに定義されているため、fn関数の内側では参照できます。
一方、fn関数の外側から変数xは参照できないためReferenceErrorをなげます。



function fn() {

    const x = 1;

    // fn関数のスコープ内から`x`は参照できる

    console.log(x); // => 1

}

fn();

// fn関数のスコープ外から`x`は参照できないためエラー

console.log(x); // => ReferenceError: x is not defined

​
実行  ログをクリア  終了

ReferenceError: x is not defined
このコードを見て分かるように、変数xはfn関数のスコープに紐付けて定義されます。 そのため、変数xはfn関数のスコープ内でのみ参照できます。

関数は仮引数をもつことができますが、仮引数は関数のスコープに紐付けて定義します。 そのため、仮引数はその関数の中でのみ参照が可能で、関数の外からは参照できません。


1
function fn(arg) {
2
    // fn関数のスコープ内から仮引数`arg`は参照できる
3
    console.log(arg); // => 1
4
}
5
fn(1);
6
// fn関数のスコープ外から`arg`は参照できないためエラー
7
console.log(arg); // => ReferenceError: arg is not defined
8
​
実行  ログをクリア  終了
1
ReferenceError: arg is not defined
この関数によるスコープのことを関数スコープと呼びます。

変数と宣言の章にて、letやconstは同じスコープ内に同じ名前の変数を二重に定義できないという話をしました。 これは、各スコープには同じ名前の変数は1つしか宣言できないためです。（varによる変数宣言とfunctionによる関数宣言は例外的に可能です）

// スコープ内に同じ"a"を定義すると SyntaxError となる
let a;
let a;
一方、スコープが異なれば同じ名前で変数を宣言できます。 次の例では、fnA関数とfnB関数という異なるスコープで、それぞれ変数xを定義できていることが分かります。


1
// 異なる関数のスコープには同じ"x"を定義できる
2
function fnA() {
3
    let x;
4
}
5
function fnB() {
6
    let x;
7
}
8
​
実行  ログをクリア  終了
このように、スコープが異なれば同じ名前の変数を定義できます。 スコープの仕組みがないと、グローバルな空間な一意な変数名を考える必要があります。 スコープがあることで適切な名前の変数を定義できるようになるため、スコープの役割は重要です。