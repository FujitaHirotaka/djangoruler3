[概要]
関数式
関数式とは、関数を値として変数へ代入している式のことを言います。
 関数宣言は文でしたが、
 関数式では関数を文字列などと同じように値として扱っています。

// 関数式
const 関数名 = function() {
    // 関数を呼び出した時の処理
    // ...
    return 関数の返す値;
};
関数式ではfunctionキーワードの右辺に書く関数名は省略できます。
 なぜなら関数式では変数名が関数名となるためです。
 一方、関数宣言ではfunctionキーワードの右辺の関数名は省略できません。

// 関数宣言では"関数名"は省略できない
function 関数名() {

}
// 関数式では変数名があるため"関数名"を省略できる
const 変数名かつ関数名 = function() {
};
このように関数式では、名前を持たない関数を変数に代入できます。 
このような名前を持たない関数を匿名関数（または無名関数）と呼びます。

また、関数式でも関数に名前を付けることもできます。 
この場合、関数式に付けた名前は関数の外からは呼ぶことができません。
 一方、関数の中からは呼ぶことができるため、
 再帰呼び出しなどに利用されます。

// innerFactは外からは見えない名前
const factorial = function innerFact(n) {
    if (n === 0) {
        return 1;
    }
    return n * innerFact(n - 1); // 再帰呼び出し
};
console.log(factorial(3)); // => 6

[ES2015] Arrow Function
関数式にはもうひとつArrow Functionと呼ばれる書き方があります。
 名前があらわすように =>（イコールと大なり記号） を使うことで、
 匿名関数を定義できます。
 次のように、functionキーワードを使った関数式と
 よく似た書き方をします。

const 関数名 = () => {
    // 関数を呼び出した時の処理
    // ...
    return 関数の返す値;
};
Arrow Functionには書き方のいくつかパターンがありますが、
functionキーワードに比べて短く書けるようになっています。 
また、Arrow Functionには省略記法があり、
次の場合にはさらに短く書けます。

関数の仮引数が1つのときは()を省略できる
関数の処理が1つの式である場合に、
ブロックとreturn文を省略できる
その式の評価結果をreturnの返り値とする
// 仮引数の数と定義
const fnA =     () => { /* 仮引数がないとき */ };
const fnB =    (x) => { /* 仮引数が1つのみのとき */ };
const fnC =      x => { /* 仮引数が1つのみのときは()を省略可能 */ };
const fnD = (x, y) => { /* 仮引数が複数の時 */ };
// 値の返し方
// 次の２つの定義は同じ意味となる
const mulA =     x => { return x * x; } // ブロックの中でreturn
const mulB =     x => x * x;            // 1行のみの場合はreturnとブロックを省略できる