[概要]
javaScriptでは、処理をまとめる際に関数やメソッド、クラスを使います。
これらは関数オブジェクトと言われる関数として使えるオブジェクトの一種です。

関数オブジェクトは()を付けることで関数として呼び出すことができます。
またオブジェクトでもあるため、{}で定義したオブジェクトと同じ使い方もできます。

// `fn`という名前の関数オブジェクトを定義する
function fn() {
}
// 関数オブジェクトにプロパティを追加できる
fn.property = "value";
しかし、関数に対してオブジェクトのようにプロパティを追加することは殆どしません。
このようなことがしたい場合は、関数に状態を持たせたいケースが殆どです。
 これに対して、状態を扱うことが前提のクラスを使うことで分かりやすく管理できます。
 （詳しくはn章で解説します）

そのため、まずは関数オブジェクトではなく関数について見ていきましょう。

関数宣言
JavaScriptでは、関数宣言をfunctionキーワードを使うことで行えます。 
functionから始まる文は関数宣言と呼び、次のように関数を宣言できます。

// 関数定義
function 関数名(仮引数1, 仮引数2) {
    // 関数を呼び出された時の処理
    // ...
    return 関数が返す値;
}
// 関数呼び出し
関数名(引数1, 引数2);
関数は次の3つの要素から構成されています。

関数名 - 利用できる文字列は変数名と同じ
仮引数 - 引数と共に呼ばれた場合に値が入る変数。複数ある場合は,（カンマ）で区切る
関数の処理 - {と}で囲んだ関数の処理
宣言した関数は、関数名()と書くことで呼び出すことができます。 
関数を引数と共に呼ぶ際は、関数名(引数1, 引数2)とし、
引数が複数ある場合は,（カンマ）で区切ります。

次の例では、引数で受け取った値を2倍にして返す関数を定義しています。
 関数はreturn 返り値;で返り値を返すことができます。

function multiple(num) {
    return num * 2;
}

console.log(multiple(10)); // => 20
実行
値を返していない又は空のreturn;と書いた場合、関数はundefinedを返します。

function noop() {
}

console.log(noop()); // => undefined;