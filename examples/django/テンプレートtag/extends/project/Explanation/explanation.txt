[概要]
includeとextendsは併用できる。

Django のテンプレートエンジンの中で最もパワフルな -- ゆえに最も複雑な -- 
部分が、テンプレートの継承です。テンプレートを継承すると、ベースとなる 
"骨組みの" テンプレートにサイトの共通要素を記述し、block を定義することで
子テンプレートにオーバーライド（ここ重要!)させることができます。

テンプレートの継承を理解するには、実例を見るのが一番早いでしょう:

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css">
    <title>{% block title %}My amazing site{% endblock %}</title>
</head>

<body>
    <div id="sidebar">
        {% block sidebar %}
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
        {% endblock %}
    </div>

    <div id="content">
        {% block content %}{% endblock %}
    </div>
</body>
</html>

我々が base.html と呼ぶことになるこのテンプレートは、
シンプルな HTML の骨組みを定義し、シンプルな 2 列のサイトを表示できるようになっています。
block をコンテンツで埋めるのは、""子"" テンプレートの仕事です。

この例では、block タグにより、子テンプレートが埋めることができる 3 つのブロックが定義されています。
block タグの仕事は、テンプレートのこれらの部分が子テンプレートによりオーバーライドされる
可能性があることをテンプレートエンジンに伝えることです。

子テンプレートは以下のようになります:

{% extends "base.html" %}

{% block title %}My amazing blog{% endblock %}

{% block content %}
{% for entry in blog_entries %}
    <h2>{{ entry.title }}</h2>
    <p>{{ entry.body }}</p>
{% endfor %}
{% endblock %}
ここで重要なのは extends タグです。このタグが、
このテンプレートが他のテンプレートを "拡張" することを
テンプレートエンジンに伝えるのです。
テンプレートシステムがこのテンプレートを評価する際に、
最初に親テンプレートを探しに行きます -- この例では "base.html" です。

この時点で、テンプレートエンジンは base.html 内の block を認識し、
子テンプレートのコンテンツと差し替えます。
blog_entries の値に応じて、アウトプットは以下のようになります:

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="style.css">
    <title>My amazing blog</title>
</head>

<body>
    <div id="sidebar">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/blog/">Blog</a></li>
        </ul>
    </div>

    <div id="content">
        <h2>Entry one</h2>
        <p>This is my first entry.</p>

        <h2>Entry two</h2>
        <p>This is my second entry.</p>
    </div>
</body>
</html>
子テンプレート内で sidebar を定義していないため、
親テンプレートの値がそのまま使われていることに留意してください。
親テンプレートの {% block %} タグ内のコンテンツは、
常にフォールバックとして使用されます。

継承は、必要なだけ段階を経ることができます。
継承を使う一般的な方法は、以下の 3 段階のアプローチです:

メインのルック・アンド・フィールを保持する base.html を作成します。
それぞれの "セクション" に対して、base_セクション名.html テンプレートを作成します。
例えば、base_news.html、base_sports.html などです。
これらはすべて base.html を拡張 (extends) し、
セクション固有のスタイルやデザインを定義します。
ページのそれぞれのタイプに対して、個別のテンプレートを作成します。
たとえばニュース記事やブログエントリーなどです。
これらのテンプレートは、適切なセクションの手プレートを拡張 (extends) します。
このアプローチにより、コードの再利用を最大化でき、共通のコンテンツ部 
(全セクション共通のナビゲーションなど) に項目を追加するのが容易になります。

継承を使用する際のコツをいくつか紹介します:

テンプレート内で {% extends %} を使用する際は、
そのテンプレート内で一番最初のテンプレートタグとして指定する必要があります。
それ以外の場合、継承が正しく動作しません。

ベースのテンプレートには {% block %} タグを多く配置するほどよいです。
子テンプレートがすべてのブロックを埋める必要がないことを思い出してください。
多くのブロック内に適当なデフォルトを記述しておき、
必要なものを後で定義し直せばいいのです。
フックは多ければ多いほどいいということです。

もし同じコンテンツを複数のテンプレート内で記述していたら、
そのコンテンツを親テンプレートの {% block %} に移動させるべきかもしれません。

親テンプレートからブロックのコンテンツを取得する必要がある場合、
{{ block.super }} が利用できます。
親のブロックを完全にオーバーライドせずに、
コンテンツを追加したい場合に有用です。
{{ block.super }} を使って挿入されたデータは自動的にエスケープされません 
(next section を参照してください)。
これは、必要な場合は親テンプレートですでにエスケープされているからです。

テンプレートタグの as シンタックスを使用して {% block %} の外で生成された変数は、
ブロックの内部で使用することはできません。例えば、以下のテンプレートは何も表示しません:

{% trans "Title" as title %}
{% block content %}{{ title }}{% endblock %}

可読性を増すために、{% endblock %} タグにも 名前 を記述できます。例えば:

{% block content %}
...
{% endblock content %}
大きなテンプレートでは、このテクニックでどの {% block %} が
閉じられているのかが分かりやすくなります。

最後に、同じテンプレート内で同じ名前の block タグを
複数定義することはできないことに留意してください。
この制限は、block タグが "両方向に" 働くのが理由です。
block タグは埋めるための穴を提供するだけではなく 
-- 親テンプレート 内で穴を埋めるコンテンツを定義します。
もし同名の block がテンプレート内に 2 つ存在すると、
どちらのブロックのコンテンツを使うべきかテンプレートの親が
判断できなくなってしまうのです。